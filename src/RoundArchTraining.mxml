<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:vo="vo.*"
				layout="absolute" 
				minWidth="955" minHeight="600"
				initialize="application1_initializeHandler(event)">
	<mx:Script>
		
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import vo.PhoneCategoryVO;
			import vo.ProductVO;
			
			private const DP_DATA_URL:String = "http://digitalprimates.net/flexstore/data/catalog.xml";
			
			private const NOKIA_N:String = "Nokia N";
			private const NOKIA_3000:String = "Nokia 3000";
			private const NOKIA_6000:String = "Nokia 6000";
			private const NOKIA_7000:String = "Nokia 7000";
			private const NOKIA_9000:String = "Nokia 9000";
			
			private var nokiaNCategory:PhoneCategoryVO;
			private var nokia3Category:PhoneCategoryVO;
			private var nokia6Category:PhoneCategoryVO;
			private var nokia7Category:PhoneCategoryVO;
			private var nokia9Category:PhoneCategoryVO;
			
			private var xmlLoader:URLLoader;
			private var catalogXML:XML;

			//-------------------------------------------------------------------
			
			private function testRegex( regex:RegExp, value:String ):Boolean
			{
				return new RegExp(regex).test(value) ? true : false
			}
			
			//-------------------------------------------------------------------
			
			private function filterN( product:ProductVO ):Boolean 
			{
				return testRegex(/[a-zA-Z]{5}\s(N)/, product.name);
			}
			
			private function filter3( product:ProductVO ):Boolean 
			{
				return testRegex(/[a-zA-Z]{5}\s(3)/, product.name);
			}
			
			private function filter6( product:ProductVO ):Boolean 
			{
				return testRegex(/[a-zA-Z]{5}\s(6)/, product.name);
			}
			
			private function filter7( product:ProductVO ):Boolean 
			{
				return testRegex(/[a-zA-Z]{5}\s(7)/, product.name);
			}
			
			private function filter9( product:ProductVO ):Boolean 
			{
				return testRegex(/[a-zA-Z]{5}\s(9)/, product.name);
			}
			
			
			//-------------------------------------------------------------------
				
			private function sortProductsByCategory( productsCollection:ArrayCollection, filter:Function, categoryCollection:PhoneCategoryVO, categoryName:String ):void
			{
				productsCollection.filterFunction = filter;
				categoryCollection = new PhoneCategoryVO(categoryName, productsCollection);
				productsCollection.refresh();
				
				Alert.show('' + productsCollection);
			}
			
			
			//-------------------------------------------------------------------
			
			private function parseXML( catalogXML:XML ):Array 
			{
				var products:Array = new Array();
				
				for each( var productXML:XML in catalogXML.product ) 
				{
					var productId:int = productXML[0].@productId;
					var name:String = productXML[0].name;
					var description:String = productXML[0].description;
					var price:Number = productXML[0].price;
					var image:String = productXML[0].image;
					var series:int = productXML[0].series;
					var triband:Boolean = productXML[0].triband;
					var camera:Boolean = productXML[0].camera;
					var video:Boolean = productXML[0].video;
					var highlight1:String = productXML[0].highlight1;
					var highlight2:String = productXML[0].highlight2;
					
					var product:ProductVO = new ProductVO( productId, name, description, price, image, series, triband, camera, video, highlight1, highlight2 );
					
					products.push(product);
				}
				
				return products;
			}
			
			private function sortProducts( products:Array ):void
			{
				var productsNCollection:ArrayCollection = new ArrayCollection(products);
				var products3Collection:ArrayCollection = new ArrayCollection(products);
				var products6Collection:ArrayCollection = new ArrayCollection(products);
				var products7Collection:ArrayCollection = new ArrayCollection(products);
				var products9Collection:ArrayCollection = new ArrayCollection(products);
				
				sortProductsByCategory(productsNCollection, filterN, nokiaNCategory, NOKIA_N);
				sortProductsByCategory(products3Collection, filter3, nokia3Category, NOKIA_3000);
				sortProductsByCategory(products6Collection, filter6, nokia6Category, NOKIA_6000);
				sortProductsByCategory(products7Collection, filter7, nokia7Category, NOKIA_7000);
				sortProductsByCategory(products9Collection, filter9, nokia9Category, NOKIA_9000);
			}
			
			
			private function handle_xmlLoaderComplete(e:Event):void 
			{
				catalogXML = XML(e.target.data);
				var products:Array = parseXML(catalogXML);
				sortProducts(products);
			}
			
			
			protected function application1_initializeHandler(event:FlexEvent):void
			{
				xmlLoader = new URLLoader();
				
				xmlLoader.addEventListener(Event.COMPLETE, handle_xmlLoaderComplete);
				xmlLoader.load(new URLRequest(DP_DATA_URL));
			}
		]]>

		
	</mx:Script>
	
</mx:Application>
