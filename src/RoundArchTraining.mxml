<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:vo="vo.*"
				layout="absolute" 
				minWidth="955" minHeight="600"
				initialize="application1_initializeHandler(event)">
	<mx:Script>
		
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.validators.RegExpValidationResult;
			
			import vo.PhoneCategoryVO;
			import vo.ProductVO;
			
			private var xmlLoader:URLLoader;
			private var catalogXML:XML;
			
			private var phoneCategories:ArrayCollection;
			
			private const DP_DATA_URL:String = "http://digitalprimates.net/flexstore/data/catalog.xml";
			
			private const NOKIA_N:String = "Nokia N";
			private const NOKIA_3000:String = "Nokia 3000";
			private const NOKIA_6000:String = "Nokia 6000";
			private const NOKIA_7000:String = "Nokia 7000";
			private const NOKIA_9000:String = "Nokia 9000";
			
			private var nokiaNPhones:ArrayCollection = new ArrayCollection();
			private var nokia3Phones:ArrayCollection = new ArrayCollection();
			private var nokia6Phones:ArrayCollection = new ArrayCollection();
			private var nokia7Phones:ArrayCollection = new ArrayCollection();
			private var nokia9Phones:ArrayCollection = new ArrayCollection();
			
			
			private function buildPhoneCategories():void 
			{
				var nokiaNPhonesVO:PhoneCategoryVO = new PhoneCategoryVO(NOKIA_N, nokiaNPhones);
				var nokia3PhonesVO:PhoneCategoryVO = new PhoneCategoryVO(NOKIA_3000, nokia3Phones);
				var nokia6PhonesVO:PhoneCategoryVO = new PhoneCategoryVO(NOKIA_6000, nokia6Phones);
				var nokia7PhonesVO:PhoneCategoryVO = new PhoneCategoryVO(NOKIA_7000, nokia7Phones);
				var nokia9PhonesVO:PhoneCategoryVO = new PhoneCategoryVO(NOKIA_9000, nokia9Phones);
				
				trace("nokiaNPhonesVO: " + nokiaNPhonesVO.name + ' ' + nokiaNPhones.length);
				trace("nokia3PhonesVO: " + nokia3PhonesVO.name + ' ' + nokia3Phones.length);
				trace("nokia6PhonesVO: " + nokia6PhonesVO.name + ' ' + nokia6Phones.length);
				trace("nokia7PhonesVO: " + nokia7PhonesVO.name + ' ' + nokia7Phones.length);
				trace("nokia9PhonesVO: " + nokia9PhonesVO.name + ' ' + nokia9Phones.length);
			}
			
			private function testRegex( regex:RegExp, value:String ):Boolean
			{
				return new RegExp(regex).test(value) ? true : false
			}
			
			private function sortProductsByCategory( products:Array ):void 
			{
				for each(var product:ProductVO in products) 
				{
					if (testRegex( /[a-zA-Z]{5}\s(N)/, product.name)) 
					{
						nokiaNPhones.addItem( product );
					} 
					else if (testRegex( /[a-zA-Z]{5}\s(3)/, product.name)) 
					{
						nokia3Phones.addItem( product );
					} 
					else if (testRegex( /[a-zA-Z]{5}\s(6)/, product.name)) 
					{
						nokia6Phones.addItem( product );
					} 
					else if (testRegex( /[a-zA-Z]{5}\s(7)/, product.name)) 
					{
						nokia7Phones.addItem( product );
					} 
					else if (testRegex( /[a-zA-Z]{5}\s(9)/, product.name)) 
					{
						nokia9Phones.addItem( product );
					} 
					else 
					{
						trace("invalid product name in xml");
					}
				}
				
				buildPhoneCategories();
			}
			
			
			private function parseXML(catalogXML:XML):Array 
			{
				var products:Array = new Array();
				
				for each( var productXML:XML in catalogXML.product ) 
				{
					var productId:int = productXML[0].@productId;
					var name:String = productXML[0].name;
					var description:String = productXML[0].description;
					var price:Number = productXML[0].price;
					var image:String = productXML[0].image;
					var series:int = productXML[0].series;
					var triband:Boolean = productXML[0].triband;
					var camera:Boolean = productXML[0].camera;
					var video:Boolean = productXML[0].video;
					var highlight1:String = productXML[0].highlight1;
					var highlight2:String = productXML[0].highlight2;
					
					var product:ProductVO = new ProductVO( productId, name, description, price, image, series, triband, camera, video, highlight1, highlight2 );
					
					products.push(product);
				}
				
				return products;
			}
			
			private function handle_xmlLoaderComplete(e:Event):void 
			{
				catalogXML = XML(e.target.data);
				var products:Array = parseXML(catalogXML);
				sortProductsByCategory(products);
			}
			
			protected function application1_initializeHandler(event:FlexEvent):void
			{
				xmlLoader = new URLLoader();
				
				xmlLoader.addEventListener(Event.COMPLETE, handle_xmlLoaderComplete);
				xmlLoader.load(new URLRequest(DP_DATA_URL));
			}
		]]>

		
	</mx:Script>
	
</mx:Application>
